// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VSCode.Models;

namespace vscode.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190606122635_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085");

            modelBuilder.Entity("VSCode.Models.bohater.Bohater", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Imie");

                    b.Property<string>("Podklasy")
                        .IsRequired();

                    b.Property<int>("Stan");

                    b.HasKey("Id");

                    b.ToTable("Bohaterowie");
                });

            modelBuilder.Entity("VSCode.Models.bohater.Umiejetnosc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BohaterId");

                    b.Property<int>("Klawisz");

                    b.Property<string>("Nazwa");

                    b.Property<string>("Opis");

                    b.Property<int>("PunktyLeczenia");

                    b.Property<int>("PunktyObrazen");

                    b.Property<int>("PunktyTarczy");

                    b.HasKey("Id");

                    b.HasIndex("BohaterId");

                    b.ToTable("Umiejetnosci");
                });

            modelBuilder.Entity("VSCode.Models.Gracz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BattleTag");

                    b.Property<string>("Imie");

                    b.Property<string>("Nazwisko");

                    b.Property<string>("Pseudonim");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Gracze");
                });

            modelBuilder.Entity("VSCode.Models.osiagniecie.Osiagniecie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Nazwa");

                    b.HasKey("Id");

                    b.ToTable("Osiagniecia");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Osiagniecie");
                });

            modelBuilder.Entity("VSCode.Models.osiagniecie.OsiagniecieGracza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AktualnyStatus");

                    b.Property<int>("GraczId");

                    b.Property<int>("OsiagniecieId");

                    b.HasKey("Id");

                    b.HasIndex("GraczId");

                    b.HasIndex("OsiagniecieId");

                    b.ToTable("OsiagnieciaGracza");
                });

            modelBuilder.Entity("VSCode.Models.rozgrywka.Mapa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IloscRund");

                    b.Property<string>("Nazwa");

                    b.Property<int?>("RozgrywkaId");

                    b.Property<int>("TypId");

                    b.HasKey("Id");

                    b.HasIndex("RozgrywkaId");

                    b.HasIndex("TypId");

                    b.ToTable("Mapy");
                });

            modelBuilder.Entity("VSCode.Models.rozgrywka.MapToMap", b =>
                {
                    b.Property<int>("Mapa1Id");

                    b.Property<int>("Mapa2Id");

                    b.HasKey("Mapa1Id", "Mapa2Id");

                    b.HasIndex("Mapa2Id");

                    b.ToTable("MapToMap");
                });

            modelBuilder.Entity("VSCode.Models.rozgrywka.Rozgrywka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("SezonId");

                    b.HasKey("Id");

                    b.ToTable("Rozgrywki");
                });

            modelBuilder.Entity("VSCode.Models.rozgrywka.RozgrywkaGracza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GraczId");

                    b.Property<int>("PrzyrostPoziomu");

                    b.Property<int>("RozgrywkaId");

                    b.Property<string>("Wynik");

                    b.HasKey("Id");

                    b.HasIndex("GraczId");

                    b.HasIndex("RozgrywkaId");

                    b.ToTable("RozgrywkiGraczy");
                });

            modelBuilder.Entity("VSCode.Models.rozgrywka.StatystykiBohaterem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BohaterId");

                    b.Property<long>("CzasGry");

                    b.Property<int>("LiczbaAsyst");

                    b.Property<int>("LiczbaZabojstw");

                    b.Property<int>("LiczbaZgonow");

                    b.Property<int>("RozgrywkaGraczaId");

                    b.HasKey("Id");

                    b.HasIndex("BohaterId");

                    b.HasIndex("RozgrywkaGraczaId");

                    b.ToTable("StatystykiBohaterami");
                });

            modelBuilder.Entity("VSCode.Models.rozgrywka.TypMapy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("LiczbaCeli");

                    b.Property<int>("Typ");

                    b.HasKey("Id");

                    b.ToTable("TypyMap");
                });

            modelBuilder.Entity("VSCode.Models.sezon.Ranking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GraczId");

                    b.Property<int>("Poziom");

                    b.Property<int>("PozycjaRankingowa");

                    b.Property<int>("SezonId");

                    b.HasKey("Id");

                    b.HasIndex("GraczId");

                    b.HasIndex("SezonId");

                    b.ToTable("Rankingi");
                });

            modelBuilder.Entity("VSCode.Models.sezon.Sezon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataRozpoczecia");

                    b.Property<int>("MaxIloscPunktow");

                    b.Property<int>("MinIloscPunktow");

                    b.HasKey("Id");

                    b.ToTable("Sezony");
                });

            modelBuilder.Entity("VSCode.Models.osiagniecie.OsiagniecieZaUmiejetnosc", b =>
                {
                    b.HasBaseType("VSCode.Models.osiagniecie.Osiagniecie");

                    b.Property<int>("MaksymalnyWynik");

                    b.Property<string>("Opis");

                    b.ToTable("OsiagniecieZaUmiejetnosc");

                    b.HasDiscriminator().HasValue("OsiagniecieZaUmiejetnosc");
                });

            modelBuilder.Entity("VSCode.Models.bohater.Umiejetnosc", b =>
                {
                    b.HasOne("VSCode.Models.bohater.Bohater", "Bohater")
                        .WithMany("Umiejetnosci")
                        .HasForeignKey("BohaterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VSCode.Models.osiagniecie.OsiagniecieGracza", b =>
                {
                    b.HasOne("VSCode.Models.Gracz", "Gracz")
                        .WithMany("OsiagnieciaGracza")
                        .HasForeignKey("GraczId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VSCode.Models.osiagniecie.Osiagniecie", "Osiagniecie")
                        .WithMany("OsiagnieciaGraczy")
                        .HasForeignKey("OsiagniecieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VSCode.Models.rozgrywka.Mapa", b =>
                {
                    b.HasOne("VSCode.Models.rozgrywka.Rozgrywka")
                        .WithMany("Mapy")
                        .HasForeignKey("RozgrywkaId");

                    b.HasOne("VSCode.Models.rozgrywka.TypMapy", "Typ")
                        .WithMany("Mapy")
                        .HasForeignKey("TypId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VSCode.Models.rozgrywka.MapToMap", b =>
                {
                    b.HasOne("VSCode.Models.rozgrywka.Mapa", "Mapa1")
                        .WithMany("PowiazaneMapy")
                        .HasForeignKey("Mapa1Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VSCode.Models.rozgrywka.Mapa", "Mapa2")
                        .WithMany("InnePowiazaneMapy")
                        .HasForeignKey("Mapa2Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VSCode.Models.rozgrywka.RozgrywkaGracza", b =>
                {
                    b.HasOne("VSCode.Models.Gracz", "Gracz")
                        .WithMany("RozgrywkiGracza")
                        .HasForeignKey("GraczId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VSCode.Models.rozgrywka.Rozgrywka", "Rozgrywka")
                        .WithMany("RozgrywkiGraczy")
                        .HasForeignKey("RozgrywkaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VSCode.Models.rozgrywka.StatystykiBohaterem", b =>
                {
                    b.HasOne("VSCode.Models.bohater.Bohater", "Bohater")
                        .WithMany()
                        .HasForeignKey("BohaterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VSCode.Models.rozgrywka.RozgrywkaGracza", "RozgrywkaGracza")
                        .WithMany("StatystykiBohaterami")
                        .HasForeignKey("RozgrywkaGraczaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VSCode.Models.sezon.Ranking", b =>
                {
                    b.HasOne("VSCode.Models.Gracz", "Gracz")
                        .WithMany("Rankingi")
                        .HasForeignKey("GraczId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VSCode.Models.sezon.Sezon", "Sezon")
                        .WithMany("Rankingi")
                        .HasForeignKey("SezonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
